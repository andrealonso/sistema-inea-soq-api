// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  login           String        @unique
  senha           String
  pessoas         Pessoas?      @relation(fields: [pessoas_id], references: [id])
  pessoas_id      Int?
  ativo_status    Ativo_status? @relation(fields: [ativo_status_id], references: [id])
  ativo_status_id Int?
  pessoas_tipo    Pessoas_tipo? @relation(fields: [pessoas_tipo_id], references: [id])
  pessoas_tipo_id Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("usuarios")
}

model Ativo_status {
  id        Int    @id @default(autoincrement())
  descricao String @unique
  usuarios  User[]

  @@map("ativo_status")
}

model Pessoas {
  id              Int            @id @default(autoincrement())
  nome            String
  cpf_cnpj        String
  email           String?
  telefone        String?
  obs             String?        @db.Text
  empresas        Empresas?      @relation(fields: [empresas_id], references: [id])
  empresas_id     Int?
  pessoas_tipo    Pessoas_tipo?  @relation(fields: [pessoas_tipo_id], references: [id])
  pessoas_tipo_id Int?
  enderecos       Enderecos[]
  usuario         User[]
  propriedades    Propriedades[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("pessoas")
}

model Pessoas_tipo {
  id        Int       @id @default(autoincrement())
  descricao String
  pessoas   Pessoas[]
  usuarios  User[]

  @@map("pessoas_tipo")
}

model Enderecos {
  id              Int           @id @default(autoincrement())
  cep             String?
  rua             String
  num             String?
  bairro          String
  cidade          String
  uf              String
  pessoas         Pessoas?      @relation(fields: [pessoas_id], references: [id])
  pessoas_id      Int?
  empresas        Empresas?     @relation(fields: [empresas_id], references: [id])
  empresas_id     Int?
  propriedades    Propriedades? @relation(fields: [propriedades_id], references: [id])
  propriedades_id Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("enderecos")
}

model Empresas {
  id            Int            @id @default(autoincrement())
  nome          String
  cnpj          String
  email         String?
  telefone      String?
  contato_nome  String?
  contato_tel   String?
  obs           String?        @db.Text
  parceira_inea Boolean        @default(false)
  propriedades  Propriedades[]
  pessoas       Pessoas[]
  endereco      Enderecos[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("empresas")
}

model Propriedades {
  id          Int         @id @default(autoincrement())
  nome        String
  car         String?
  area        Decimal     @default(0)
  area_cana   Decimal     @default(0)
  geolocal    String?
  empresas    Empresas?   @relation(fields: [empresas_id], references: [id])
  empresas_id Int?
  obs         String?     @db.Text
  endereco    Enderecos[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  Pessoas    Pessoas?  @relation(fields: [pessoas_id], references: [id])
  pessoas_id Int?

  @@map("propriedades")
}

model Documentos {
  id             Int          @id @default(autoincrement())
  nome           String
  descricao      String
  doc_destino    Doc_destino? @relation(fields: [doc_destino_id], references: [id])
  doc_destino_id Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("documentos")
}

model Doc_destino {
  id         Int          @id @default(autoincrement())
  descricao  String
  documentos Documentos[]

  @@map("doc_destino")
}
